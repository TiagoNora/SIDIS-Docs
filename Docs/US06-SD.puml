@startuml
'https://plantuml.com/sequence-diagram

title Vote for a review
autoactivate on
autonumber

actor "Client" as User
participant ":VoteC" as voteC
participant ":VoteC_n" as voteC_n
participant ":VoteQ" as voteQ
participant ":VoteQ_n" as voteQ_n
participant ":ReviewC" as reviewC
participant ":ReviewC_n" as reviewC_n
participant "VotesController" as Ctrl
participant "votesService:VotesService" as service
participant "voteRepository:VoteRepository" as repo
participant ":JWTRepository" as jwtRepository
participant ":ReviewRepository" as reviewRepository

participant "vote:Vote" as vote
participant ":MessageBroker" as broker


voteC_n -> broker: subscribe "Vote.created"
voteQ -> broker: subscribe "Vote.created"
voteQ_n -> broker: subscribe "Vote.created"
reviewC -> broker: subscribe "Vote.created"
reviewC_n -> broker: subscribe "Vote.created"

activate User
User -> voteC : POST /votes/{idReview}
voteC -> Ctrl:  POST /votes/{idReview}
Ctrl -> service : service.create(resource,idReview,idUser);
service --> service: parseJwt(request)

service -> jwtRepository: findByJWT(jwt)
jwtRepository --> service: user

service -> reviewRepository:findById(reviewId)
reviewRepository --> service: review

service -> vote**: new(resource.getVote(),user.getId,reviewId)
vote --> service: vote
service -> reviewRepository: updateReview(reviewId), resource.getVote())
reviewRepository --> service: ok
service -> repo: save(vote)
repo --> service: ok
service -> broker: publish "Vote.created, {Vote}"

voteC_n <- broker: notify "Vote.created, {Vote}"
voteC_n --> voteC_n: save(Vote)
voteQ <- broker: notify "Vote.created, {Vote}"
voteQ --> voteQ: save(Vote)
voteQ_n <- broker: notify "Vote.created, {Vote}"
voteQ_n --> voteQ_n: save(Vote)
reviewC <- broker: notify "Vote.created, {Vote}"
reviewC --> reviewC: save(Vote)
reviewC_n <- broker: notify "Vote.created, {Vote}"
reviewC_n --> reviewC_n: save(Vote)

service --> Ctrl: ok
Ctrl --> voteC: ok
voteC --> User: ok

@enduml
